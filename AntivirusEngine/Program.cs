using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Reflection;

namespace AntivirusEngine
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            Console.InputEncoding = Encoding.UTF8;
            Console.Title = "AntivirusEngine";

            Console.WriteLine("Basic Antivirus Engine");
            Console.Write("FileToCheck: ");

            string input = Console.ReadLine().Replace("\"", string.Empty);

            if(File.Exists(input))
            {
                bool isVirus = false;
                int virusTypeIndex = 0;
                using (FileStream fs = new FileStream(input, FileMode.Open, FileAccess.Read))
                {
                    byte[] buffer = new byte[1024 * 1024];
                    int read = 0;
                    long offset = 0;
                    while((read = fs.Read(buffer, 0, buffer.Length)) != 0)
                    {
                        using(MemoryStream ms = new MemoryStream())
                        {
                            ms.Write(buffer, 0, read);
                            (bool virusCheck, int index) = AntivirusEngine.AntivirCheckInBytesWithVirusType(ms.ToArray());
                            Console.WriteLine($"[*] Checking Sector: ({offset}, {read})");
                            if (virusCheck) { isVirus = true; virusTypeIndex = index; break; }
                        }
                        offset += read;
                    }
                }

                if (isVirus)
                {
                    Console.WriteLine($"[!] This file is a possible threat: {AntivirusEngine.GetVirusSignatureName(virusTypeIndex)}");
                }
                else
                {
                    Console.WriteLine($"[+] This file should be virus free");
                }
                //byte[] data = File.ReadAllBytes(input);
                //Console.WriteLine("File Load Completed\n");

                //(bool virusCheck, int index) = AntivirusEngine.AntivirCheckInBytesWithVirusType(data);

                //if(virusCheck)
                //{
                //    Console.WriteLine($"[!] This file is a possible threat: {AntivirusEngine.GetVirusSignatureName(index)}");
                //}
                //else
                //{
                //    Console.WriteLine($"[+] This file should be virus free");
                //}
            }
            else
            {
                Console.WriteLine("File Does Not Exist");
            }
            Console.ReadKey(true);
        }
    }
    public class AntivirusEngine
    {
        private static List<byte[]> virusSignature = new List<byte[]>()
        {
            // W32.TrickBot.A
            new byte[] { 0x6A, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00,
                0x00, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0x35, 0x00, 0x00,
                0x00, 0x00, 0x50, 0xFF, 0x15 },

            // W32.Zotob.A
            new byte[] { 0x90, 0x90, 0xEB, 0x1E, 0x5B, 0x33, 0xC0, 0x50, 0x50, 0x5A,
                0x4B, 0xE8, 0xE },

            // W32.Mydoom.A
            new byte[] { 0x0E, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x54,
                0x72, 0x61, 0x63, 0x6B, 0x3A },

            // W32.NotPetya.A
            new byte[] { 0x77, 0xBE, 0x72, 0x32, 0x8B, 0x06, 0x6A, 0x00, 0x68, 0x00,
                0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x35,
                0x00, 0x00, 0x00, 0x00 },

            // W32.Ryuk.A
            new byte[] { 0x52, 0x5A, 0x20, 0x88, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00,
                0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00 },
            
            // W32.ILOVEYOU.A
            new byte[] { 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x0A, 0x20, 0x54, 0x68, 0x69,
                0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20 },
            
            // W32.Melissa.A
            new byte[] { 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
                0x20, 0x4D, 0x61, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74 },
            
            // W32.Nimda.A
            new byte[] { 0x4E, 0x69, 0x6D, 0x64, 0x61, 0x20, 0x32, 0x2E, 0x35, 0x20,
                0x49, 0x53, 0x4F, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6F },
            
            // W32.CodeRed.A
            new byte[] { 0x4E, 0x54, 0x20, 0x49, 0x49, 0x53, 0x20, 0x35, 0x2E, 0x30,
                0x00, 0x03, 0x01, 0x00, 0x01, 0x51, 0x55, 0x45, 0x52, 0x59 },
            
            // W32.Slammer.A
            new byte[] { 0x82, 0xA6, 0x20, 0xE8, 0x01, 0x00, 0x00, 0x00, 0x81, 0xEC,
                0x78, 0x00, 0x00, 0x00, 0x33, 0xC0, 0x89, 0x45, 0xFC, 0x8B },

            // W32.BadRabbit.A
            new byte[] { 0xE8, 0xE3, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x54, 0x24, 0x18,
                0x48, 0x83, 0xEC, 0x08, 0x48, 0x8B, 0x41, 0x60, 0x48, 0x8B },
            
            // W32.Locky.A
            new byte[] { 0xFD, 0xE8, 0x00, 0x00, 0x00, 0x60, 0xBE, 0x00, 0x00, 0x40,
                0x00, 0x48, 0x8D, 0x7D, 0xD8, 0xEB, 0x0C, 0xE8, 0x00, 0x00 },
            
            // W32.CryptoLocker.A
            new byte[] { 0x30, 0x82, 0x04, 0xFB, 0x30, 0x82, 0x03, 0xE3, 0xA0, 0x03,
                0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0x9E, 0x87, 0xF2, 0x40 },
            
            // W32.GandCrab.A
            new byte[] { 0x2F, 0x2F, 0x57, 0x41, 0x52, 0x4E, 0x49, 0x4E, 0x47, 0x3A,
                0x20, 0x47, 0x61, 0x6E, 0x64, 0x43, 0x72, 0x61, 0x62, 0x20 },
            
            // W32.TeslaCrypt.A
            new byte[] { 0x7D, 0xE8, 0x02, 0x00, 0x00, 0x00, 0x41, 0xB8, 0x02, 0x00,
                0x00, 0x00, 0x4C, 0x8D, 0x0D, 0x5D, 0x00, 0x00, 0x00, 0xBA },
            
            // W32.Emotet.A
            new byte[] { 0x5D, 0x00, 0x33, 0xC0, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3 },

            // W32.Mydoom.A
            new byte[] { 0xEB, 0x03, 0x5B, 0x31, 0xC0, 0x50, 0xFF, 0x55, 0x3C, 0x53,
                0x8B, 0x5D, 0x08, 0x8B, 0x7B, 0x20, 0x8B, 0x03, 0xF0, 0x0F },
            
            // W32.Duqu.A
            new byte[] { 0xEB, 0x03, 0x5B, 0x31, 0xC0, 0x50, 0xFF, 0x55, 0x3C, 0x53,
                0x8B, 0x5D, 0x08, 0x8B, 0x7B, 0x20, 0x8B, 0x03, 0xF0, 0x0F },
            
            // W32.Stuxnet.A
            new byte[] { 0x43, 0x61, 0x6C, 0x69, 0x62, 0x72, 0x69, 0x20, 0x53, 0x75,
                0x70, 0x72, 0x65, 0x6D, 0x65, 0x20, 0x32, 0x2E, 0x30, 0x20 },
            
            // W32.WannaCry.A
            new byte[] { 0x52, 0x5A, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

            // W32.Melissa.A
            new byte[] { 0x52, 0x45, 0x47, 0x45, 0x44, 0x49, 0x54, 0x20, 0x4D, 0x41,
                0x49, 0x4C, 0x53, 0x2E, 0x20, 0x4D, 0x49, 0x43, 0x52, 0x4F },
            
            // W32.Slammer.A
            new byte[] { 0x53, 0x45, 0x4C, 0x45, 0x43, 0x54, 0x20, 0x2A, 0x20, 0x46,
                0x52, 0x4F, 0x4D, 0x20, 0x6D, 0x61, 0x73, 0x74, 0x65, 0x72 },
            
            // W32.Lovsan.A
            new byte[] { 0xEB, 0x03, 0x5B, 0x31, 0xC0, 0x50, 0xFF, 0x55, 0x3C, 0x53,
                0x8B, 0x5D, 0x08, 0x8B, 0x7B, 0x20, 0x8B, 0x03, 0xF0, 0x0F },
            
            // W32.Netsky.AA@mm
            new byte[] { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00 },
            
            // W32.Zotob.A
            new byte[] { 0xEB, 0x03, 0x5B, 0x31, 0xC0, 0x50, 0xFF, 0x55, 0x3C, 0x53,
                0x8B, 0x5D, 0x08, 0x8B, 0x7B, 0x20, 0x8B, 0x03, 0xF0, 0x0F },

            // W32.Sality.AE
            new byte[] { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00 },

            // W32.Stuxnet.A
            new byte[] { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00 },

            // W32.Mydoom.AH@mm
            new byte[] { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00 },

            // W32.Sobig.F@mm
            new byte[] { 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00, 0x08, 0x00,
                0x00, 0x00, 0x21, 0x00, 0x5E, 0x5B, 0x53, 0x50, 0x43, 0x48 },

            // W32.Nimda.E
            new byte[] { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00 },

            // W32.CodeRed.F
            new byte[] { 0x3C, 0x68, 0x74, 0x6D, 0x6C, 0x3E, 0x0D, 0x0A, 0x3C, 0x21,
                0x2D, 0x2D, 0x20, 0x23, 0x44, 0x65, 0x66, 0x69, 0x6E, 0x65 },

            // W32.Sasser.B
            new byte[] { 0xE8, 0x03, 0x00, 0x00, 0x00, 0x60, 0xBE, 0x00, 0x00, 0x00,
                0x00, 0x5D, 0x5B, 0x8D, 0x4D, 0x0C, 0xE8 }
        };
        private static List<string> virusSignatureType = new List<string>()
        {
            "W32.TrickBot.A",
            "W32.Zotob.A",
            "W32.Mydoom.A",
            "W32.TrickBot.A",
            "W32.NotPetya.A",
            "W32.Ryuk.A",
            "W32.ILOVEYOU.A",
            "W32.Melissa.A",
            "W32.Nimda.A",
            "W32.CodeRed.A",
            "W32.Slammer.A",
            "W32.BadRabbit.A",
            "W32.Locky.A",
            "W32.CryptoLocker.A",
            "W32.GandCrab.A",
            "W32.TeslaCrypt.A",
            "W32.Emotet.A",
            "W32.Mydoom.A",
            "W32.Duqu.A",
            "W32.Stuxnet.A",
            "W32.WannaCry.A",
            "W32.Melissa.A",
            "W32.Slammer.A",
            "W32.Lovsan.A",
            "W32.Netsky.AA@mm",
            "W32.Zotob.A",
            "W32.Sality.AE",
            "W32.Stuxnet.A",
            "W32.Mydoom.AH@mm",
            "W32.Sobig.F@mm",
            "W32.Nimda.E",
            "W32.CodeRed.F",
            "W32.Sasser.B"
        };

        public static bool AntivirCheckInBytes(byte[] data)
        {
            foreach(var vs in virusSignature.ToArray())
            {
                Console.WriteLine($"Checking: {Encoding.UTF8.GetString(vs)}");
                int matchIndex = IndexOf(data, vs);
                if (matchIndex != -1)
                {
                    return true;
                }
            }
            return false;
        }
        public static (bool, int) AntivirCheckInBytesWithVirusType(byte[] data)
        {
            for (int i = 0; i < virusSignature.Count; i++)
            {
                byte[] signature = virusSignature[i];

                //Console.WriteLine($"Checking: {virusSignatureType[i]}");

                int matchIndex = IndexOf(data, signature);
                if (matchIndex != -1)
                {
                    return (true, i);
                }
            }
            return (false, -1);
        }
        public static string GetVirusSignatureName(int index)
        {
            return virusSignatureType.Count > index && index > 0 ? virusSignatureType[index] : "Bad Index For Found Virus Name";
        }
        public static int IndexOf(byte[] data, byte[] search)
        {
            for (int i = 0; i < data.Length - search.Length; i++)
            {
                bool found = true;
                for (int j = 0; j < search.Length; j++)
                {
                    if (data[i + j] != search[j])
                    {
                        found = false;
                        break;
                    }
                }
                if (found)
                {
                    return i;
                }
            }
            return -1;
        }
    }
}
